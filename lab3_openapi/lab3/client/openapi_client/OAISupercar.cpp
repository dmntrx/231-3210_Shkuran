/**
 * Supercar API
 * API для управления данными о суперкарах
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupercar.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupercar::OAISupercar(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupercar::OAISupercar() {
    this->initializeModel();
}

OAISupercar::~OAISupercar() {}

void OAISupercar::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_car_brand_isSet = false;
    m_car_brand_isValid = false;

    m_car_model_isSet = false;
    m_car_model_isValid = false;

    m_brand_country_isSet = false;
    m_brand_country_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_max_speed_isSet = false;
    m_max_speed_isValid = false;

    m_engine_name_isSet = false;
    m_engine_name_isValid = false;
}

void OAISupercar::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupercar::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_car_brand_isValid = ::OpenAPI::fromJsonValue(m_car_brand, json[QString("car_brand")]);
    m_car_brand_isSet = !json[QString("car_brand")].isNull() && m_car_brand_isValid;

    m_car_model_isValid = ::OpenAPI::fromJsonValue(m_car_model, json[QString("car_model")]);
    m_car_model_isSet = !json[QString("car_model")].isNull() && m_car_model_isValid;

    m_brand_country_isValid = ::OpenAPI::fromJsonValue(m_brand_country, json[QString("brand_country")]);
    m_brand_country_isSet = !json[QString("brand_country")].isNull() && m_brand_country_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("release_date")]);
    m_release_date_isSet = !json[QString("release_date")].isNull() && m_release_date_isValid;

    m_max_speed_isValid = ::OpenAPI::fromJsonValue(m_max_speed, json[QString("max_speed")]);
    m_max_speed_isSet = !json[QString("max_speed")].isNull() && m_max_speed_isValid;

    m_engine_name_isValid = ::OpenAPI::fromJsonValue(m_engine_name, json[QString("engine_name")]);
    m_engine_name_isSet = !json[QString("engine_name")].isNull() && m_engine_name_isValid;
}

QString OAISupercar::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupercar::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_car_brand_isSet) {
        obj.insert(QString("car_brand"), ::OpenAPI::toJsonValue(m_car_brand));
    }
    if (m_car_model_isSet) {
        obj.insert(QString("car_model"), ::OpenAPI::toJsonValue(m_car_model));
    }
    if (m_brand_country_isSet) {
        obj.insert(QString("brand_country"), ::OpenAPI::toJsonValue(m_brand_country));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("release_date"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_max_speed_isSet) {
        obj.insert(QString("max_speed"), ::OpenAPI::toJsonValue(m_max_speed));
    }
    if (m_engine_name_isSet) {
        obj.insert(QString("engine_name"), ::OpenAPI::toJsonValue(m_engine_name));
    }
    return obj;
}

qint32 OAISupercar::getId() const {
    return m_id;
}
void OAISupercar::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISupercar::is_id_Set() const{
    return m_id_isSet;
}

bool OAISupercar::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISupercar::getCarBrand() const {
    return m_car_brand;
}
void OAISupercar::setCarBrand(const QString &car_brand) {
    m_car_brand = car_brand;
    m_car_brand_isSet = true;
}

bool OAISupercar::is_car_brand_Set() const{
    return m_car_brand_isSet;
}

bool OAISupercar::is_car_brand_Valid() const{
    return m_car_brand_isValid;
}

QString OAISupercar::getCarModel() const {
    return m_car_model;
}
void OAISupercar::setCarModel(const QString &car_model) {
    m_car_model = car_model;
    m_car_model_isSet = true;
}

bool OAISupercar::is_car_model_Set() const{
    return m_car_model_isSet;
}

bool OAISupercar::is_car_model_Valid() const{
    return m_car_model_isValid;
}

QString OAISupercar::getBrandCountry() const {
    return m_brand_country;
}
void OAISupercar::setBrandCountry(const QString &brand_country) {
    m_brand_country = brand_country;
    m_brand_country_isSet = true;
}

bool OAISupercar::is_brand_country_Set() const{
    return m_brand_country_isSet;
}

bool OAISupercar::is_brand_country_Valid() const{
    return m_brand_country_isValid;
}

QDate OAISupercar::getReleaseDate() const {
    return m_release_date;
}
void OAISupercar::setReleaseDate(const QDate &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAISupercar::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAISupercar::is_release_date_Valid() const{
    return m_release_date_isValid;
}

qint32 OAISupercar::getMaxSpeed() const {
    return m_max_speed;
}
void OAISupercar::setMaxSpeed(const qint32 &max_speed) {
    m_max_speed = max_speed;
    m_max_speed_isSet = true;
}

bool OAISupercar::is_max_speed_Set() const{
    return m_max_speed_isSet;
}

bool OAISupercar::is_max_speed_Valid() const{
    return m_max_speed_isValid;
}

QString OAISupercar::getEngineName() const {
    return m_engine_name;
}
void OAISupercar::setEngineName(const QString &engine_name) {
    m_engine_name = engine_name;
    m_engine_name_isSet = true;
}

bool OAISupercar::is_engine_name_Set() const{
    return m_engine_name_isSet;
}

bool OAISupercar::is_engine_name_Valid() const{
    return m_engine_name_isValid;
}

bool OAISupercar::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupercar::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

OAISupercar OAISupercar::fromJson(const QByteArray &jsonData) {
    QJsonDocument doc = QJsonDocument::fromJson(jsonData);
    if (!doc.isObject()) {
        throw std::runtime_error("Invalid JSON format");
    }

    OAISupercar car;
    car.fromJson(doc.toJson(QJsonDocument::Compact));  // Вызов встроенного метода
    return car;
}


} // namespace OpenAPI
